1. Setting up Virtual Machines on OpenStack
2. Install Docker on host
	# Update for apt
	sudo apt-get update
	# Installing dependencies
	sudo apt-get install \
    		apt-transport-https \
    		ca-certificates \
    		curl \
    		gnupg-agent \
    		software-properties-common
	# Add Docker’s official GPG key
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	# add link to download Docker for arm architecture to /etc/apt/source.list
	sudo add-apt-repository \
   		"deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   		$(lsb_release -cs) \
   		stable"
	# Update again (must) and Installing Docker
	sudo apt-get update
	sudo apt-get install docker-ce docker-ce-cli containerd.io
3. Install kubeadm, kubectl, kubelet
	# Run one-by-one
		sudo apt-get update && sudo apt-get install -y apt-transport-https curl

		curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

		cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
		deb https://apt.kubernetes.io/ kubernetes-xenial main
		EOF
		
		sudo apt-get update
	
		sudo apt-get install -y kubelet kubeadm kubectl

		sudo apt-mark hold kubelet kubeadm kubectl
4. Setting up the cluster on Master node:
	# Declare the API Server endpoint for the cluster
	sudo kubeadm init --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address 10.10.10.10
	
	# Authentication setting up for kubectl
	mkdir -p $HOME/.kube
	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	sudo chown $(id -u):$(id -g) $HOME/.kube/config

	# Apply Calico network solution for the cluster
	kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml
5. Join Worker node to Kubernetes cluster
	# Ensuring that swapoff and using sudo
		sudo swapoff -a
	##### Access to Kubernetes master on cloud to get token for joining
		sudo kubeadm token create --print-join-command
	# Get the output (kubeadm join ....) and run on Worker node, remember to use "sudo"
	# Check on master that Jetson has joined or not
		kubectl get node
6. Deploying Kubernetes Objects	
	kubectl apply -f notification/replicaset.yaml
	kubectl apply -f notification/service.yaml
	kubectl apply -f notification-edge/replicaset.yaml
	kubectl apply -f notification-edge/service.yaml
	kubectl apply -f server/replicaset.yaml
	kubectl apply -f server/service.yaml
	kubectl apply -f server-edge/replicaset.yaml
	kubectl apply -f server-edge/service.yaml